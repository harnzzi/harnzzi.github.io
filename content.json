{"meta":{"title":"hamlog","subtitle":"hamlog","description":"서두르지 말고, 그러나 쉬지도 말고 - 괴테","author":"hamzzi","url":"https://harnzzi.github.io","root":"/"},"pages":[],"posts":[{"title":"std::vector에서 size, capacity의 차이점은 무엇일까?","slug":"std-vector에서-size-capacity의-차이점은-무엇일까","date":"2020-04-19T10:36:55.000Z","updated":"2020-04-19T11:10:37.528Z","comments":true,"path":"2020/04/19/std-vector에서-size-capacity의-차이점은-무엇일까/","link":"","permalink":"https://harnzzi.github.io/2020/04/19/std-vector%EC%97%90%EC%84%9C-size-capacity%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/","excerpt":"","text":"std::vector, std::string에서는 길이 리턴이 가능하다. string에서는 length, size모두 사용 가능하며, vector에서는 size를 사용하면 되겠다. 그런데 갑자기 인텔리센스(자도완성)에서 보이는 capacity… size와 차이가 무엇일까? size와 capacity 위 그림과 같이, capacity는 vector의 type 또는 string의 각 character type들을 담을 수 있는 메모리가 할당되어 있는 공간의 용량이다. 보통, capacity는 현재 가지고 있는 원소의 개수(size, length)보다 더 많은 공간을 할당해 놓고 있다. 일반적으로 string에서는 8bytes를 미리 확보하고, 그보다 length가 더 길다면 32bytes, … 순으로 증가하는 것으로 보인다(이는 컴퓨터 구조, os등에 따라 차이가 보여질 수 있다). 따라서, 새로운 원소를 추가할 때(push_back) capacity가 size보다 크다면, O(1)로 새로운 원소를 추가하거나 지울 수 있게 된다.","categories":[{"name":"C++","slug":"C","permalink":"https://harnzzi.github.io/categories/C/"}],"tags":[{"name":"C++11","slug":"C-11","permalink":"https://harnzzi.github.io/tags/C-11/"},{"name":"standard","slug":"standard","permalink":"https://harnzzi.github.io/tags/standard/"},{"name":"--c++11","slug":"c-11","permalink":"https://harnzzi.github.io/tags/c-11/"}]},{"title":"Hello World using Hexo!","slug":"hello-world","date":"2020-04-19T08:37:19.795Z","updated":"2020-04-19T08:57:09.371Z","comments":true,"path":"2020/04/19/hello-world/","link":"","permalink":"https://harnzzi.github.io/2020/04/19/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy or 12$ hexo d -g # hexo deploy --generate$ hexo g -d # hexo generate --deploy More info: Deployment Update12$ hexo clean$ hexo g -d Posting1$ hexo new post &lt;post_name&gt;","categories":[{"name":"Web","slug":"Web","permalink":"https://harnzzi.github.io/categories/Web/"},{"name":"FrameWork","slug":"Web/FrameWork","permalink":"https://harnzzi.github.io/categories/Web/FrameWork/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://harnzzi.github.io/tags/Web/"},{"name":"Blog","slug":"Blog","permalink":"https://harnzzi.github.io/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"https://harnzzi.github.io/tags/Hexo/"}]},{"title":"BOJ::17825{주사위윷놀이};","slug":"BOJ-17825-주사위윷놀이","date":"2020-04-17T13:25:52.000Z","updated":"2020-04-19T08:58:16.619Z","comments":true,"path":"2020/04/17/BOJ-17825-주사위윷놀이/","link":"","permalink":"https://harnzzi.github.io/2020/04/17/BOJ-17825-%EC%A3%BC%EC%82%AC%EC%9C%84%EC%9C%B7%EB%86%80%EC%9D%B4/","excerpt":"","text":"Infomation 처음에는 시작 칸에 말 4개가 있다. 말은 게임판에 그려진 화살표의 방향대로만 이동할 수 있다. 말이 파란색 칸에서 이동을 시작하면 파란색 화살표를 타야 하고, 이동하는 도중이거나 파란색이 아닌 칸에서 이동을 시작하면 빨간색 화살표를 타야 한다. 말이 도착 칸으로 이동하면 주사위에 나온 수와 관계 없이 이동을 마친다. 게임은 10개의 턴으로 이루어진다. 매 턴마다 1부터 5까지 한 면에 하나씩 적혀있는 5면체 주사위를 굴리고, 도착 칸에 있지 않은 말을 하나 골라 주사위에 나온 수만큼 이동시킨다. 말이 이동을 마치는 칸에 다른 말이 있으면 그 말은 고를 수 없다. 단, 이동을 마치는 칸이 도착 칸이면 고를 수 있다 말이 이동을 마칠 때마다 칸에 적혀있는 수가 점수에 추가된다. Idea 입력받는 10개의 수는 주사위가 순서대로 주어지는 것이므로, 순서대로 주어지는 주사위 값을 4개의 말 중 하나와 대응하면 될 것이다. 모든 경우의 수는 4^10 = 1,048,576 번이므로, 시간복잡도가 높지만 문제가 될 것 같지 않다. 각 주사위 수에 말을 대입하면서 다음과 같은 경우에는 조합을 건너뛴다. 현재의 말이 이미 도착한 경우 말이 이동을 완료한 후 위치에 다른 말이 존재할 경우 조합이 완료되었다면, 점수를 그 전의 점수와 비교하여 더 큰 값으로 갱신한다. Design 말의 구조체를 생성한다. 구조체에는 말이 현재 존재하고있는 위치와, 이미 도착 칸에 있는지에 대한 정보가 있어야 한다. 말판에 대한 배열이 생성되어야 한다. 말판이 blue일 때와","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://harnzzi.github.io/categories/Algorithm/"},{"name":"BOJ","slug":"Algorithm/BOJ","permalink":"https://harnzzi.github.io/categories/Algorithm/BOJ/"}],"tags":[{"name":"BOJ","slug":"BOJ","permalink":"https://harnzzi.github.io/tags/BOJ/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://harnzzi.github.io/tags/Algorithm/"}]},{"title":"Linux Kernel에 대하여...","slug":"Linux-Kernel에-대하여","date":"2020-03-18T12:53:56.000Z","updated":"2020-04-19T08:58:55.858Z","comments":true,"path":"2020/03/18/Linux-Kernel에-대하여/","link":"","permalink":"https://harnzzi.github.io/2020/03/18/Linux-Kernel%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/","excerpt":"","text":"커널은 부팅 시에 시작되어 컴퓨터 종료시 커널이 끝난다. 장치 드라이버는 하드웨어와 밀접하게 연관되고 해당 장치를 제어하는 프로그램이다. 커널 공간에서 이루어지는 작업으로는 입출력, 네트워크 등의 하드웨어 제어, 메모리와 같은 컴퓨터의 리소스 관리, 응용 프로그램의 실행 제어 등이 있다. 커널과는 달리 응용 프로그램은 사용자 요청에 의해 저장장치로부터 메모리에 로드되어 실행한다. 응용 프로그램이 하드웨어를 직접 제어할 수는 없기 때문에, 커널의 장치 드라이버를 사용하기 위해 시스템 호출 방법으로 커널에 접근하여 자료를 처리한다. 전자 제품에서 각각의 주변 기기들을 제어하기 위해 설계된 펌웨어 또한 장치 드라이버로 분류된다. 장치 드라이버의 실제 예는 소스가 공개된 리눅스 커널 소스에서 /driver 디렉터리 밑에 있는 파일들을 참조하여 볼 수 있다. Reference https://ko.wikipedia.org/wiki/%EC%8B%9C%EC%8A%A4%ED%85%9C_%ED%98%B8%EC%B6%9C","categories":[{"name":"Operating System","slug":"Operating-System","permalink":"https://harnzzi.github.io/categories/Operating-System/"}],"tags":[{"name":"OS","slug":"OS","permalink":"https://harnzzi.github.io/tags/OS/"},{"name":"Linux","slug":"Linux","permalink":"https://harnzzi.github.io/tags/Linux/"},{"name":"Kernel","slug":"Kernel","permalink":"https://harnzzi.github.io/tags/Kernel/"}]},{"title":"RTOS와 GTOS <스케쥴링> 편","slug":"RTOS와-GTOS-스케쥴링-편","date":"2020-02-24T15:46:02.000Z","updated":"2020-04-19T08:59:32.657Z","comments":true,"path":"2020/02/25/RTOS와-GTOS-스케쥴링-편/","link":"","permalink":"https://harnzzi.github.io/2020/02/25/RTOS%EC%99%80-GTOS-%EC%8A%A4%EC%BC%80%EC%A5%B4%EB%A7%81-%ED%8E%B8/","excerpt":"RTOS(Real Time Operating System)과, 일반적으로 OS라고 불리우는 GPOS(General Purpose Operating System)에 대해서 알아봅니다. RTOS GPOS 우선순위 기반 스케쥴링 우선순위 보다는 스레드와 프로세스 모두 동일한 순서로 수행. 즉, 높은 스루풋을 기준으로 처리 프로그램이 실행되는 시간이 중요한 시스템에 적합 동시에 많은 응용 프로그램을 실행하기에 좋음. 우선순위가 높은 하나의 작업을 해야하는 프로세스가 있다고 하더라도, 우선순위가 낮은 여러개의 작업을 먼저 수행할 수 있음(preemptive/non-preemptive) 항상 우선순위를 기반으로 하고(preemptive), 우선순위가 높은 프로세스를 실행할 때 동안 낮은 우선순위를 가진 프로세스는 실행되지 않음 OS는 스케쥴링된 스레드가 많을수록 latency가 생길 수 있는데, RTOS의 경우 프로세스와 스레드가 모두 지정된 시간 제한 내에 실행되어야 하기 때문에 latency가 없음","text":"RTOS(Real Time Operating System)과, 일반적으로 OS라고 불리우는 GPOS(General Purpose Operating System)에 대해서 알아봅니다. RTOS GPOS 우선순위 기반 스케쥴링 우선순위 보다는 스레드와 프로세스 모두 동일한 순서로 수행. 즉, 높은 스루풋을 기준으로 처리 프로그램이 실행되는 시간이 중요한 시스템에 적합 동시에 많은 응용 프로그램을 실행하기에 좋음. 우선순위가 높은 하나의 작업을 해야하는 프로세스가 있다고 하더라도, 우선순위가 낮은 여러개의 작업을 먼저 수행할 수 있음(preemptive/non-preemptive) 항상 우선순위를 기반으로 하고(preemptive), 우선순위가 높은 프로세스를 실행할 때 동안 낮은 우선순위를 가진 프로세스는 실행되지 않음 OS는 스케쥴링된 스레드가 많을수록 latency가 생길 수 있는데, RTOS의 경우 프로세스와 스레드가 모두 지정된 시간 제한 내에 실행되어야 하기 때문에 latency가 없음 Foreground/Background system 복잡도가 낮은 소형 시스템은 일반적으로 전경/배경 시스템, 또는 super-loop로 설계됩니다. super-loop는 각 모듈을 호출하여 원하는 작업(함수)을 수행하는 무한루프(while(1))로 구성되어 있으며, 이것을 배경(Background) 시스템이라 부릅니다. 인터럽트 서비스 루틴(ISR)은 비동기 이벤트들(Foreground)를 처리합니다. 즉, Background에서 작업을 수행하다가 꼭 필요한 시기에 우선순위가 높은 작업을 수행해 주어야 한다면 Foreground; ISR(Interrupt Service Routine)를 처리하게 됩니다. 따라서 위의 그림과 같이, Background가 작업을 수행하다가 인터럽트가 걸리게 되면 멈추고 인터럽트부터 처리합니다(꼭!). 그 이후에야 Background로 복귀가 가능합니다. Pros and Cons 간단한 프로그램 짜기에 용이합니다. 커널에 의한 메모리손실이나 수행시간 손실이 없습니다. 모든 함수는 우선순위가 같기 때문에, 프로그래머 자신이 순서대로 잘 돌 수 있도록 코드를 짜는 것이 중요합니다. Real-Time Kernel System 커널기반의 프로그램을 이용하면 위의 Background/Foreground system과 다음과 같은 차이점이 존재합니다. 커널을 사용하게 되면, 2.5%정도의 시간을 더 허비하게 됩니다 커널 사용시 ROM, RAM을 더 많이 사용하게 됩니다. Real-Time Kernel은 MCU의 수행 시간을 컨트롤합니다. 즉, 제일 우선순위가 높은 것 부터 처리할 수 있습니다. 한 프로그램에 여러개의 Task가 존재합니다. (즉, 무한루프가 여러개 존재합니다.) 각각의 Task들은 자기 자신이 온전히 CPU를 독점하여 사용하는 것 처럼 동작합니다. (1) 우선 순위가 낮은 작업이 실행 중입니다. (2) 인터럽트가 발생하면, CPU는 인터럽트 서비스를 담당하는 ISR로 벡터(Array);다수의 데이터를 처리하는 명령어를 가진 CPU ㅡ 를 보냅니다. (3) ISR은 인터럽트 장치를 서비스 하지만 실제로는 거의 작동하지 않습니다. ISR은 일반적으로 높은 우선 순위를 가진 작업에 신호를 보내거나 메시지를 보냅니다. (4) ISR이 완료되면 높은 우선순위를 가진 Task를 수행 할 준비가 되었으며, 그 전 중단된 낮은 우선순위의 작업으로 돌아가지 않고 대신 더 중요한 작업으로 Context Switch됩니다. (5) 우선 순위가 높은 작업은 인터럽트에 응답하여 필요한 처리를 실행하고 수행합니다. (6) 우선순위가 높은 작업이 완료되면 Task의 시작 부분으로 돌아갑니다. (7) 낮은 우선순위를 갖고 있던 작업은 인터럽트 되었던 지점에서부터 정확하게 다시 시작합니다. 즉, Background/Foreground System은 모든 일을 수행하는 순서와 끝내는 시간, 그 종류 등을 모두 직접 계산하고 결정해야 합니다. 하지만 Kernel System을 이용하면 해야할 작업의 우선순위를 지정한다면 그것을 알아서 진행시킬 수 있다는 이점이 있습니다. Context Switching 커널의 스케쥴러가 각 Task를 수행하는 작업을 하게 됩니다. 이 때 원칙에 따라 커널의 종류가 선점형(preemptive)과 비선점형(non-preemptive)로 나뉘게 됩니다. 이 때 Context Switching이 빠른 커널이 꼭 장점만 있는 것은 아닙니다. 왜냐하면, CPU가 가지고 있는 레지스터의 양에 따라서 부과되는 오버헤드의 양이 달라지기 때문입니다. 즉, Context Switching이 Kernel Dependent하면서도 CPU Dependent하므로 이것만으로 커널의 성능을 결정 지을 수는 없게 됩니다. 또한 각각의 Task들은 선언되어 컴파일 되는 순간 스택에 자신의 공간을 갖습니다. 이 때 레지스터 정보를 스택에 Push하고, 수행할 Task의 레지스터 정보를 Pop하여 일을 수행합니다. 이후에 Context Switching을 해야할 때 다시 현재의 레지스터 정보를 스택에 저장하고, 빼내어 수행하는 일을 매우 빠르고 효율적으로 수행하면서 멀티 태스킹을 하게 됩니다. Non-preemptive v.s Preemptive 비선점형 커널은 ISR로 바로 넘겨주기 전에 돌고 있던 Task로 다시 CPU 점유권을 넘기는 커널입니다. 따라서 아무리 우선순위가 높은 Task가 점유하고자 해도 현재 작업을 수행하고 있는 Task에게 CPU 점유권이 주어집니다. 따라서 이러한 커널은 멀티태스킹을 하기 위해서, Task가 자체적으로 자신의 CPU 점유권을 놓아야 합니다. ex) OS_Dly_wait(100)… 따라서 다음과 같은 특징이 존재하게 됩니다. 인터럽트의 지연시간이 짧습니다(응답시간과 복귀시간이 짧아지게 됩니다). Task레벨에서도 비재진입 함수를 사용할 수 있게 됩니다(Task에서 제어권을 넘겨주기 전에는 절대로 다른 Task로 제어권이 넘어가지 않기 때문). Task의 응답성이 떨어집니다(수행시간이 긴 Task가 점유하게 된다면, 우선순위가 높은 Task가 오랜시간 동안 대기해야 될 가능성). 선점형 커널은 이와 반대로, ISR에서 복귀할 때 최 우선순위를 갖는 Task에게 CPU 점유율을 넘기게 됩니다. 따라서 로직이 조금 더 복잡하지만, 프로그램의 응답성이 매우 개선됩니다. 선점형 커널에서는 최상위 우선순위 Task가 언제 CPU를 받을 수 있을지 알 수 있게 되는데, 그로 인하여 Critical Section, 비재진입 함수의 사용 등에서 문제가 발생하게 됩니다. 아직 Task의 작업이 끝나지 않은 상태에서 더 중요한 Task에 CPU 점유권이 넘어갔는데 비재진입 함수를 호출한다면 데이터가 꼬이게 될 가능성이 존재하게 됩니다(전역변수, …). 따라서 상호 배제적으로 공유자원에 접근하기 위한 방법이 필요하게 됩니다. 그 방법은 다음과 같습니다. 인터럽트 enable/disable Semaphore의 사용 TAS(Test and Set) Scheduler Lock/Unlcok Clock Tick, Jitter Clock Tick이란 정기적으로 일어나는 특별한 인터럽트입니다. Clock Tick을 통하여 CPU의 점유권을 스케쥴러에게 양도하고, 지정한 틱이 지나면 Ready List에 들어가게 됩니다. 하지만 위와 같이 높은 우선순위의 Task와 ISR이 1틱(20ms)만큼 딜레이 하려는 Task보다 선행되어 실행되는 경우, 실제로는 불규칙적인 간격을 보이게 됩니다. 이러한 현상을 Jitter라고 합니다. 따라서 Jitter현상은 Hard Real-Time OS에서 조금 덜한 현상을 보입니다. Reference https://doc.micrium.com/ http://www.circuitstoday.com/gpos-versus-rtos-for-an-embedded-system ‘Operating Systems : Three Easy Pieces’, Remzi H. Arpaci-Dusseau, Andrea C. Arpaci-dusseau","categories":[{"name":"Operating System","slug":"Operating-System","permalink":"https://harnzzi.github.io/categories/Operating-System/"},{"name":"RTOS","slug":"Operating-System/RTOS","permalink":"https://harnzzi.github.io/categories/Operating-System/RTOS/"}],"tags":[{"name":"OS","slug":"OS","permalink":"https://harnzzi.github.io/tags/OS/"},{"name":"RTOS","slug":"RTOS","permalink":"https://harnzzi.github.io/tags/RTOS/"},{"name":"GPOS","slug":"GPOS","permalink":"https://harnzzi.github.io/tags/GPOS/"},{"name":"Scheduling","slug":"Scheduling","permalink":"https://harnzzi.github.io/tags/Scheduling/"}]}],"categories":[{"name":"C++","slug":"C","permalink":"https://harnzzi.github.io/categories/C/"},{"name":"Web","slug":"Web","permalink":"https://harnzzi.github.io/categories/Web/"},{"name":"FrameWork","slug":"Web/FrameWork","permalink":"https://harnzzi.github.io/categories/Web/FrameWork/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://harnzzi.github.io/categories/Algorithm/"},{"name":"BOJ","slug":"Algorithm/BOJ","permalink":"https://harnzzi.github.io/categories/Algorithm/BOJ/"},{"name":"Operating System","slug":"Operating-System","permalink":"https://harnzzi.github.io/categories/Operating-System/"},{"name":"RTOS","slug":"Operating-System/RTOS","permalink":"https://harnzzi.github.io/categories/Operating-System/RTOS/"}],"tags":[{"name":"C++11","slug":"C-11","permalink":"https://harnzzi.github.io/tags/C-11/"},{"name":"standard","slug":"standard","permalink":"https://harnzzi.github.io/tags/standard/"},{"name":"--c++11","slug":"c-11","permalink":"https://harnzzi.github.io/tags/c-11/"},{"name":"Web","slug":"Web","permalink":"https://harnzzi.github.io/tags/Web/"},{"name":"Blog","slug":"Blog","permalink":"https://harnzzi.github.io/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"https://harnzzi.github.io/tags/Hexo/"},{"name":"BOJ","slug":"BOJ","permalink":"https://harnzzi.github.io/tags/BOJ/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://harnzzi.github.io/tags/Algorithm/"},{"name":"OS","slug":"OS","permalink":"https://harnzzi.github.io/tags/OS/"},{"name":"Linux","slug":"Linux","permalink":"https://harnzzi.github.io/tags/Linux/"},{"name":"Kernel","slug":"Kernel","permalink":"https://harnzzi.github.io/tags/Kernel/"},{"name":"RTOS","slug":"RTOS","permalink":"https://harnzzi.github.io/tags/RTOS/"},{"name":"GPOS","slug":"GPOS","permalink":"https://harnzzi.github.io/tags/GPOS/"},{"name":"Scheduling","slug":"Scheduling","permalink":"https://harnzzi.github.io/tags/Scheduling/"}]}